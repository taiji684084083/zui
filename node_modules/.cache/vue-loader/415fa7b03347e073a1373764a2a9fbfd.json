{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sunhongyang/Desktop/zui/components/layout/col/col.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sunhongyang/Desktop/zui/components/layout/col/col.vue","mtime":1599722792870},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiekNvbCIsCiAgcHJvcHM6IHsKICAgIHRhZzogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICJkaXYiCiAgICB9LAogICAgc3BhbjogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IDI0CiAgICB9LAogICAgb2Zmc2V0OiBOdW1iZXIsCiAgICBwdXNoOiBOdW1iZXIsCiAgICBwdWxsOiBOdW1iZXIsCiAgICB4czogW051bWJlciwgT2JqZWN0XSwKICAgIHNtOiBbTnVtYmVyLCBPYmplY3RdLAogICAgbWQ6IFtOdW1iZXIsIE9iamVjdF0sCiAgICBsZzogW051bWJlciwgT2JqZWN0XSwKICAgIHhsOiBbTnVtYmVyLCBPYmplY3RdCiAgfSwKICBjb21wdXRlZDogewogICAgLy/orr7nva7liIbmoI/pl7TpmpQKICAgIGluc2VydFN0eWxlKCkgewogICAgICBjb25zdCBzdHlsZSA9IHt9OwogICAgICBsZXQgcGFyZW50ID0gdGhpcy4kcGFyZW50OwogICAgICB3aGlsZSggcGFyZW50ICYmIHBhcmVudC4kdm5vZGUgJiYgcGFyZW50LiR2bm9kZS50YWcuaW5kZXhPZigiZWxSb3ciKSA9PSAtMSl7CiAgICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7CiAgICAgIH0KICAgICAgaWYocGFyZW50ICYmIHBhcmVudC5ndXR0ZXIpIHsKICAgICAgICBzdHlsZS5wYWRkaW5nTGVmdCA9IHBhcmVudC5ndXR0ZXIgLyAyICsgInB4IjsKICAgICAgICBzdHlsZS5wYWRkaW5nUmlnaHQgPSBzdHlsZS5wYWRkaW5nTGVmdDsKICAgICAgfQogICAgICByZXR1cm4gc3R5bGU7CiAgICB9LAogICAgLy/orr7nva7lrr3luqblkozlgY/np7vph48KICAgIGNsYXNzTGlzdF9ncmlkKCkgewogICAgICBjb25zdCBsaXN0ID0gW107CiAgICAgIGlmICh0aGlzLnNwYW4gfHwgdGhpcy5zcGFuID09IDApIHsKICAgICAgICBsaXN0LnB1c2goYHotY29sLXNwYW4tJHt0aGlzLnNwYW59YCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMub2Zmc2V0IHx8IHRoaXMub2Zmc2V0ID09IDApIHsKICAgICAgICBsaXN0LnB1c2goYHotY29sLW9mZnNldC0ke3RoaXMub2Zmc2V0fWApOwogICAgICB9CiAgICAgIGlmICh0aGlzLnB1c2ggfHwgdGhpcy5wdXNoID09IDApIHsKICAgICAgICBsaXN0LnB1c2goYHotY29sLXB1c2gtJHt0aGlzLnB1c2h9YCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMucHVzaCB8fCB0aGlzLnB1bGwgPT0gMCkgewogICAgICAgIGxpc3QucHVzaChgei1jb2wtcHVsbC0ke3RoaXMucHVsbH1gKTsKICAgICAgfQogICAgICByZXR1cm4gbGlzdDsKICAgIH0sCiAgICAvL+a3u+WKoOiHqumAguW6lGNsYXNzCiAgICBjbGFzc0xpc3RfYWRhcHRpdmUoKSB7CiAgICAgIGNvbnN0IGxpc3QgPSBbXTsKCiAgICAgIFsieHMiLCAic20iLCAibWQiLCAibGciLCAieGwiXS5mb3JFYWNoKHByb3AgPT4gewogICAgICAgIGlmICh0eXBlb2YgdGhpc1twcm9wXSA9PSAibnVtYmVyIikgey8vcHJvcHPkuK3kvKDpgJLnmoTmmK/mlbDlrZcKCiAgICAgICAgICBsaXN0LnB1c2goYHotY29sLSR7cHJvcH0tJHt0aGlzW3Byb3BdfWApOwoKICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzW3Byb3BdID09ICJvYmplY3QiKSB7Ly9wcm9wc+S8oOmAkueahOaYr+WvueixoQogICAgICAgICAKICAgICAgICAgIC8v5bCG5a+56LGh6L2s5oiQ5pWw57uEa2V5cwogICAgICAgICAgLy9rZXlz6YeM6Z2i5Y+v6IO95YyF5ZCrIHNwYW4gb2Zmc2V0IHB1c2ggcHVsbAogICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXNbcHJvcF0pOwogICAgICAgICAga2V5cy5mb3JFYWNoKGVsZSA9PiB7CiAgICAgICAgICAgIGxpc3QucHVzaChgei1jb2wtJHtwcm9wfS0ke2VsZX0tJHt0aGlzW3Byb3BdW2VsZV19YCk7CiAgICAgICAgICB9KTsKCiAgICAgICAgfQogICAgICB9KTsKCiAgICAgIHJldHVybiBsaXN0OwoKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["col.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA","file":"col.vue","sourceRoot":"components/layout/col","sourcesContent":["<template>\n  <component :is=\"tag\" :style=\"insertStyle\" class=\"z-col\" :class=\"[classList_grid,classList_adaptive]\">\n    <slot></slot>\n  </component>\n</template>\n\n<script>\nexport default {\n  name: \"zCol\",\n  props: {\n    tag: {\n      type: String,\n      default: \"div\"\n    },\n    span: {\n      type: Number,\n      default: 24\n    },\n    offset: Number,\n    push: Number,\n    pull: Number,\n    xs: [Number, Object],\n    sm: [Number, Object],\n    md: [Number, Object],\n    lg: [Number, Object],\n    xl: [Number, Object]\n  },\n  computed: {\n    //设置分栏间隔\n    insertStyle() {\n      const style = {};\n      let parent = this.$parent;\n      while( parent && parent.$vnode && parent.$vnode.tag.indexOf(\"elRow\") == -1){\n        parent = parent.$parent;\n      }\n      if(parent && parent.gutter) {\n        style.paddingLeft = parent.gutter / 2 + \"px\";\n        style.paddingRight = style.paddingLeft;\n      }\n      return style;\n    },\n    //设置宽度和偏移量\n    classList_grid() {\n      const list = [];\n      if (this.span || this.span == 0) {\n        list.push(`z-col-span-${this.span}`);\n      }\n      if (this.offset || this.offset == 0) {\n        list.push(`z-col-offset-${this.offset}`);\n      }\n      if (this.push || this.push == 0) {\n        list.push(`z-col-push-${this.push}`);\n      }\n      if (this.push || this.pull == 0) {\n        list.push(`z-col-pull-${this.pull}`);\n      }\n      return list;\n    },\n    //添加自适应class\n    classList_adaptive() {\n      const list = [];\n\n      [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"].forEach(prop => {\n        if (typeof this[prop] == \"number\") {//props中传递的是数字\n\n          list.push(`z-col-${prop}-${this[prop]}`);\n\n        } else if (typeof this[prop] == \"object\") {//props传递的是对象\n         \n          //将对象转成数组keys\n          //keys里面可能包含 span offset push pull\n          const keys = Object.keys(this[prop]);\n          keys.forEach(ele => {\n            list.push(`z-col-${prop}-${ele}-${this[prop][ele]}`);\n          });\n\n        }\n      });\n\n      return list;\n\n    }\n  }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"../../../style/mixin.scss\";\n\n//分栏布局\n.z-col{\n    float: left;\n    box-sizing: border-box;\n}\n.z-col-0{\n    display: none;\n}\n@for $i from 0 through 24{\n    .z-col-span-#{$i}{\n        width:(1 / 24 * $i) * 100%;\n    }\n    .z-col-offset-#{$i}{\n        margin-left: (1 / 24 * $i) * 100%;\n    }\n    .z-col-push-#{$i}{\n        position: relative;\n        right: (1 / 24 * $i) * 100%;\n    }\n    .z-col-pull-#{$i}{\n        position: relative;\n        left: (1 / 24 * $i) * 100%;\n    }\n}\n\n//响应分栏布局\n$res-list:'xs','sm','md','lg','xl';\n@each $unit in $res-list{\n    @include res($unit){\n        .z-col-xs-span-0{\n            display: none;\n        }\n        @for $i from 0 through 24{\n            .z-col-#{$unit}-span-#{$i}{\n                width:(1 / 24 * $i ) * 100%;\n            }\n            .z-col-#{$unit}-offset-#{$i}{\n                margin-left:(1 / 24 * $i) * 100%;\n            }\n            .z-col-#{$unit}-push-#{$i}{\n                position: relative;\n                right:(1 / 24 * $i) * 100%;\n            }\n            .z-col-#{$unit}-pull-#{$i}{\n                position: relative;\n                left:(1 / 24 * $i) * 100%;\n            }\n        }\n    }\n}\n\n.hidden {\n    @each $break-point-name, $value in $--breakpoints-spec {\n      &-#{$break-point-name} {\n        @include res($break-point-name, $--breakpoints-spec) {\n          display: none !important;\n        }\n      }\n    }\n}\n\n</style>"]}]}